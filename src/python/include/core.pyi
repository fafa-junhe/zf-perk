from typing import Any, list, Callable, Union
from .version import *


class Action:
    """Specifies what to do after a hook completes."""
    Plugin_Changed: int = ...
    Plugin_Continue: int = ...
    Plugin_Handled: int = ...
    Plugin_Stop: int = ...


class Extension:
    """Defines how an extension must expose itself for autoloading."""
    autoload: bool = ...
    file: str = ...
    name: str = ...
    required: bool = ...


class Identity:
    """Specifies identity types."""
    Identity_Core: int = ...
    Identity_Extension: int = ...
    Identity_Plugin: int = ...


class PlVers:
    date: str = ...
    filevers: str = ...
    time: str = ...
    version: int = ...


class PluginInfo:
    """Plugin information properties. Plugins can declare a global variable with
their info. Example,

  public Plugin myinfo = {
  	name = "Admin Help",
  	author = "AlliedModders LLC",
  	description = "Display command information",
  	version = "1.0",
  	url = "http://www.sourcemod.net/"
  };

SourceMod will display this information when a user inspects plugins in the
console."""
    PlInfo_Author: int = ...
    PlInfo_Description: int = ...
    PlInfo_Name: int = ...
    PlInfo_URL: int = ...
    PlInfo_Version: int = ...


class PluginStatus:
    """Plugin status values."""
    Plugin_BadLoad: int = ...
    Plugin_Created: int = ...
    Plugin_Error: int = ...
    Plugin_Evicted: int = ...
    Plugin_Failed: int = ...
    Plugin_Loaded: int = ...
    Plugin_Paused: int = ...
    Plugin_Running: int = ...
    Plugin_Uncompiled: int = ...


class SharedPlugin:
    """Defines how a plugin must expose itself for native requiring."""
    file: str = ...
    name: str = ...
    required: bool = ...


def IsNullVector(vec: list[float]) -> bool:
    """Check if the given vector is the NULL_VECTOR.

@param vec     The vector to test.
@return        True if NULL_VECTOR, false otherwise."""
    pass
def IsNullString(str: str) -> bool:
    """Check if the given string is the NULL_STRING.

@param str     The string to test.
@return        True if NULL_STRING, false otherwise."""
    pass
def VerifyCoreVersion() -> int:
    pass
def MarkNativeAsOptional(name: str) -> None:
    """Sets a native as optional, such that if it is unloaded, removed,
or otherwise non-existent, the plugin will still work.  Calling
removed natives results in a run-time error.

@param name          Native name."""
    pass
def __ext_core_SetNTVOptional() -> None:
    pass
SOURCEMOD_PLUGINAPI_VERSION: Any = ...  # 7
AUTOLOAD_EXTENSIONS: Any = ...  # #define REQUIRE_EXTENSIONS
REQUIRE_PLUGIN: Any = ...  # 
__version: PlVers = ...
__ext_core: Extension = ...