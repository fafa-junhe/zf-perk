from typing import Any, list, Callable, Union
from .core import *


class TFClassType:
    TFClass_DemoMan: int = ...
    TFClass_Engineer: int = ...
    TFClass_Heavy: int = ...
    TFClass_Medic: int = ...
    TFClass_Pyro: int = ...
    TFClass_Scout: int = ...
    TFClass_Sniper: int = ...
    TFClass_Soldier: int = ...
    TFClass_Spy: int = ...
    TFClass_Unknown: int = ...


class TFCond:
    TFCond_AfterburnImmune: int = ...
    TFCond_AirCurrent: int = ...
    TFCond_BalloonHead: int = ...
    TFCond_BlastImmune: int = ...
    TFCond_BlastJumping: int = ...
    TFCond_Bleeding: int = ...
    TFCond_Bonked: int = ...
    TFCond_Buffed: int = ...
    TFCond_BulletImmune: int = ...
    TFCond_BurningPyro: int = ...
    TFCond_Charging: int = ...
    TFCond_CloakFlicker: int = ...
    TFCond_Cloaked: int = ...
    TFCond_CompetitiveLoser: int = ...
    TFCond_CompetitiveWinner: int = ...
    TFCond_CritCanteen: int = ...
    TFCond_CritCola: int = ...
    TFCond_CritDemoCharge: int = ...
    TFCond_CritHype: int = ...
    TFCond_CritMmmph: int = ...
    TFCond_CritOnDamage: int = ...
    TFCond_CritOnFirstBlood: int = ...
    TFCond_CritOnFlagCapture: int = ...
    TFCond_CritOnKill: int = ...
    TFCond_CritOnWin: int = ...
    TFCond_CritRuneTemp: int = ...
    TFCond_Dazed: int = ...
    TFCond_DeadRingered: int = ...
    TFCond_DefenseBuffMmmph: int = ...
    TFCond_DefenseBuffNoCritBlock: int = ...
    TFCond_DefenseBuffed: int = ...
    TFCond_DemoBuff: int = ...
    TFCond_DisguiseRemoved: int = ...
    TFCond_Disguised: int = ...
    TFCond_DisguisedAsDispenser: int = ...
    TFCond_Disguising: int = ...
    TFCond_DodgeChance: int = ...
    TFCond_EyeaductUnderworld: int = ...
    TFCond_FireImmune: int = ...
    TFCond_FocusBuff: int = ...
    TFCond_FreezeInput: int = ...
    TFCond_Gas: int = ...
    TFCond_GrappledByPlayer: int = ...
    TFCond_GrappledToPlayer: int = ...
    TFCond_GrapplingHook: int = ...
    TFCond_GrapplingHookBleeding: int = ...
    TFCond_GrapplingHookLatched: int = ...
    TFCond_GrapplingHookSafeFall: int = ...
    TFCond_HalloweenBombHead: int = ...
    TFCond_HalloweenCritCandy: int = ...
    TFCond_HalloweenGhostMode: int = ...
    TFCond_HalloweenGiant: int = ...
    TFCond_HalloweenHellHeal: int = ...
    TFCond_HalloweenInHell: int = ...
    TFCond_HalloweenKart: int = ...
    TFCond_HalloweenKartCage: int = ...
    TFCond_HalloweenKartDash: int = ...
    TFCond_HalloweenKartNoTurn: int = ...
    TFCond_HalloweenQuickHeal: int = ...
    TFCond_HalloweenSpeedBoost: int = ...
    TFCond_HalloweenThriller: int = ...
    TFCond_HalloweenTiny: int = ...
    TFCond_HasRune: int = ...
    TFCond_Healing: int = ...
    TFCond_HealingDebuff: int = ...
    TFCond_ImmuneToPushback: int = ...
    TFCond_InHealRadius: int = ...
    TFCond_Jarated: int = ...
    TFCond_KingAura: int = ...
    TFCond_KingRune: int = ...
    TFCond_KnockedIntoAir: int = ...
    TFCond_Kritzkrieged: int = ...
    TFCond_LostFooting: int = ...
    TFCond_MVMBotRadiowave: int = ...
    TFCond_MarkedForDeath: int = ...
    TFCond_MarkedForDeathSilent: int = ...
    TFCond_MedigunDebuff: int = ...
    TFCond_MegaHeal: int = ...
    TFCond_MeleeOnly: int = ...
    TFCond_Milked: int = ...
    TFCond_MiniCritOnKill: int = ...
    TFCond_NoHealingDamageBuff: int = ...
    TFCond_NoTaunting_DEPRECATED: int = ...
    TFCond_ObscuredSmoke: int = ...
    TFCond_OnFire: int = ...
    TFCond_Overhealed: int = ...
    TFCond_Parachute: int = ...
    TFCond_ParachuteDeployed: int = ...
    TFCond_PasstimeInterception: int = ...
    TFCond_PasstimePenaltyDebuff: int = ...
    TFCond_Plague: int = ...
    TFCond_PlagueRune: int = ...
    TFCond_PowerupModeDominant: int = ...
    TFCond_PreventDeath: int = ...
    TFCond_RadiusHealOnDamage: int = ...
    TFCond_RegenBuffed: int = ...
    TFCond_Reprogrammed: int = ...
    TFCond_RestrictToMelee: int = ...
    TFCond_RocketPack: int = ...
    TFCond_RuneAgility: int = ...
    TFCond_RuneHaste: int = ...
    TFCond_RuneImbalance: int = ...
    TFCond_RuneKnockout: int = ...
    TFCond_RunePrecision: int = ...
    TFCond_RuneRegen: int = ...
    TFCond_RuneResist: int = ...
    TFCond_RuneStrength: int = ...
    TFCond_RuneVampire: int = ...
    TFCond_RuneWarlock: int = ...
    TFCond_Sapped: int = ...
    TFCond_Slowed: int = ...
    TFCond_SmallBlastResist: int = ...
    TFCond_SmallBulletResist: int = ...
    TFCond_SmallFireResist: int = ...
    TFCond_SpawnOutline: int = ...
    TFCond_SpeedBuffAlly: int = ...
    TFCond_Stealthed: int = ...
    TFCond_StealthedUserBuffFade: int = ...
    TFCond_SupernovaRune: int = ...
    TFCond_SwimmingCurse: int = ...
    TFCond_SwimmingNoEffects: int = ...
    TFCond_Taunting: int = ...
    TFCond_TeleportedGlow: int = ...
    TFCond_Teleporting: int = ...
    TFCond_TmpDamageBonus: int = ...
    TFCond_UberBlastResist: int = ...
    TFCond_UberBulletResist: int = ...
    TFCond_UberFireResist: int = ...
    TFCond_UberchargeFading: int = ...
    TFCond_Ubercharged: int = ...
    TFCond_UberchargedCanteen: int = ...
    TFCond_UberchargedHidden: int = ...
    TFCond_UberchargedOnTakeDamage: int = ...
    TFCond_Unknown1: int = ...
    TFCond_Unknown2: int = ...
    TFCond_Zoomed: int = ...


class TFHoliday:
    TFHoliday_Invalid: int = ...


class TFObjectMode:
    TFObjectMode_Entrance: int = ...
    TFObjectMode_Exit: int = ...
    TFObjectMode_None: int = ...


class TFObjectType:
    TFObject_CartDispenser: int = ...
    TFObject_Dispenser: int = ...
    TFObject_Sapper: int = ...
    TFObject_Sentry: int = ...
    TFObject_Teleporter: int = ...


class TFTeam:
    TFTeam_Blue: int = ...
    TFTeam_Red: int = ...
    TFTeam_Spectator: int = ...
    TFTeam_Unassigned: int = ...


def TF2_IgnitePlayer(client: int, attacker: int, duration: float = ...) -> None:
    """Sets a client on fire.

@note Fire duration is capped to 10 seconds.

@param client        Player's index.
@param attacker      Attacker's index.
@param duration      Duration of fire (in seconds).
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_RespawnPlayer(client: int) -> None:
    """Respawns a client

@param client        Player's index.
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_RegeneratePlayer(client: int) -> None:
    """Regenerates a client's health and ammunition

@param client        Player's index.
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_AddCondition(client: int, condition: TFCond, duration: float = ..., inflictor: int = ...) -> None:
    """Adds a condition to a player

@param client        Player's index.
@param condition     Integer identifier of condition to apply.
@param duration      Duration of condition (does not apply to all conditions).
                     Pass TFCondDuration_Infinite to apply until manually removed.
@param inflictor     Condition inflictor's index (0 for no inflictor).
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_RemoveCondition(client: int, condition: TFCond) -> None:
    """Removes a condition from a player

@param client        Player's index.
@param condition     Integer identifier of condition to remove.
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_SetPlayerPowerPlay(client: int, enabled: bool) -> None:
    """Enables/disables PowerPlay mode on a player.

@param client        Player's index.
@param enabled       Whether to enable or disable PowerPlay on player.
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_DisguisePlayer(client: int, team: int, classType: int, target: int = ...) -> None:
    """Disguises a client to the given model and team. Only has an effect on spies.

Note: This only starts the disguise process and a delay occurs before the spy is fully disguised

@param client        Player's index.
@param team          Team to disguise the player as (only TFTeam_Red and TFTeam_Blue have an effect)
@param classType     TFClassType class to disguise the player as
@param target        Specific target player to disguise as (0 for any)
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_RemovePlayerDisguise(client: int) -> None:
    """Removes the current disguise from a client. Only has an effect on spies.

@param client        Player's index.
@error               Invalid client index, client not in game, or no mod support."""
    pass
def TF2_StunPlayer(client: int, duration: float, slowdown: float = ..., stunflags: int = ..., attacker: int = ...) -> None:
    """Stuns a client

@param client        Player's index.
@param duration      Duration of stun.
@param slowdown      Slowdown percent (as decimal, 0.00-1.00)
                     Ignored if TF_STUNFLAG_SLOWDOWN is not set.
@param stunflags     Stun flags.
@param attacker      Attacker's index (0 is allowed for world)."""
    pass
def TF2_MakeBleed(client: int, attacker: int, duration: float) -> None:
    """Induces the bleed effect on a client

@param client        Player's index.
@param attacker      Attacker's index.
@param duration      Duration of bleeding (in seconds)."""
    pass
def TF2_GetResourceEntity() -> int:
    pass
def TF2_GetClass(classname: str) -> int:
    """Finds the TFClassType for a given class name.

@param classname     A classname string such as "sniper" or "demoman"
@return              A TFClassType constant."""
    pass
def TF2_CalcIsAttackCritical(client: int, weapon: int, weaponname: str, result: bool) -> Any:
    """Called on weapon fire to decide if the current shot should be critical.
Return Plugin_Continue to let the original calculation or return a higher
action to override the decision with the value of 'result'

@note Since critical shots are also calculated client side any changes made with
      this will not show for the shooter. Projectile weapons such as the rocketlauncher
      and demoman weapons will show a critical bullet but no critical sound effect.
      Bullet hits should appear as expected.

@param client        Client Index.
@param weapon        Weapon entity Index.
@param weaponname    Classname of the weapon.
@param result        Buffer param for the result of the decision."""
    pass
def TF2_OnGetHoliday(holiday: TFHoliday) -> Any:
    pass
def TF2_OnIsHolidayActive(holiday: TFHoliday, result: bool) -> Any:
    """Called at various times when the game checks to see if the given holiday is active.
Return Plugin_Continue to let the original calculation or return a higher
action to override the decision with the value of 'result'

@param holiday       Holiday being checked.
@param result        Buffer param for the result of the decision.
@return              Plugin_Continue for original calculation, higher value to use 'result'."""
    pass
def TF2_IsHolidayActive(holiday: TFHoliday) -> bool:
    """Returns whether or not a holiday is active

@param holiday       Holiday being checked.
@return              Boolean of whether or not the holiday is active."""
    pass
def TF2_IsPlayerInDuel(client: int) -> bool:
    """Returns whether or not a client (Player) is in a duel.

@param client    Client Index.
@return              Boolean of whether or not the client/player is dueling."""
    pass
def TF2_RemoveWearable(client: int, wearable: int) -> None:
    """Removes an econ wearable (hat, misc, etc) from a player.
This also deletes the wearable entity.

@param client        Client index.
@param wearable      Index of the wearable entity.
@error               Invalid client index, client not in game, invalid wearable entity, or no mod support."""
    pass
def TF2_OnConditionAdded(client: int, condition: TFCond) -> None:
    """Called after a condition is added to a player

@param client        Index of the client to which the condition is being added.
@param condition     Condition that is being added."""
    pass
def TF2_OnConditionRemoved(client: int, condition: TFCond) -> None:
    """Called after a condition is removed from a player

@param client        Index of the client to which the condition is being removed.
@param condition     Condition that is being removed."""
    pass
def TF2_OnWaitingForPlayersStart() -> None:
    """Called when the server enters the Waiting for Players round state"""
    pass
def TF2_OnWaitingForPlayersEnd() -> None:
    """Called when the server exits the Waiting for Players round state"""
    pass
def TF2_OnPlayerTeleport(client: int, teleporter: int, result: bool) -> Any:
    """Called when a player attempts to use a teleporter to decide if the player should be allowed to teleport.
Return Plugin_Continue to let the original calculation or return a higher
action to override the decision with the value of 'result'

@param client        Client index.
@param teleporter    Teleporter entity index.
@param result        Buffer param for the result of the decision.
                     This is prepopulated with the game's original decision to let a player teleport.
@return              Plugin_Continue for original calculation, higher value to use 'result'."""
    pass
def __ext_tf2_SetNTVOptional() -> None:
    pass
TFCondDuration_Infinite: float = ...  # -1.0
TF_STUNFLAG_SLOWDOWN: Any = ...  # (1 << 0)    /**< activates slowdown modifier */
TF_STUNFLAG_BONKSTUCK: Any = ...  # (1 << 1)    /**< bonk sound, stuck */
TF_STUNFLAG_LIMITMOVEMENT: Any = ...  # (1 << 2)    /**< disable forward/backward movement */
TF_STUNFLAG_CHEERSOUND: Any = ...  # (1 << 3)    /**< cheering sound */
TF_STUNFLAG_NOSOUNDOREFFECT: Any = ...  # (1 << 5)    /**< no sound or particle */
TF_STUNFLAG_THIRDPERSON: Any = ...  # (1 << 6)    /**< panic animation */
TF_STUNFLAG_GHOSTEFFECT: Any = ...  # (1 << 7)    /**< ghost particles */
TF_STUNFLAG_SOUND: Any = ...  # (1 << 8)    /**< sound */
TF_STUNFLAGS_LOSERSTATE: Any = ...  # TF_STUNFLAG_SLOWDOWN|TF_STUNFLAG_NOSOUNDOREFFECT|TF_STUNFLAG_THIRDPERSON
TF_STUNFLAGS_GHOSTSCARE: Any = ...  # TF_STUNFLAG_GHOSTEFFECT|TF_STUNFLAG_THIRDPERSON
TF_STUNFLAGS_SMALLBONK: Any = ...  # TF_STUNFLAG_THIRDPERSON|TF_STUNFLAG_SLOWDOWN
TF_STUNFLAGS_NORMALBONK: Any = ...  # TF_STUNFLAG_BONKSTUCK
TF_STUNFLAGS_BIGBONK: Any = ...  # TF_STUNFLAG_CHEERSOUND|TF_STUNFLAG_BONKSTUCK
__ext_tf2: Extension = ...